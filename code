//12 Question 
#include <stdio.h>

int main() {
    int weights[5];
    int totalWeight = 0;
    int i;
    int choice;

    // Ask the user whether to use predefined weights or input their own
    printf("Choose an option:\n");
    printf("1. Use predefined weights\n");
    printf("2. Input your own weights\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);

    if (choice == 1) {
        // Use predefined weights
        weights[0] = 10; // Example weight 1
        weights[1] = 20; // Example weight 2
        weights[2] = 30; // Example weight 3
        weights[3] = 40; // Example weight 4
        weights[4] = 50; // Example weight 5
        printf("Using predefined weights: 10, 20, 30, 40, 50\n");
    } else if (choice == 2) {
        // Input weights from the user
        printf("Enter the weights of the five treasures:\n");
        for (i = 0; i < 5; i++) {
            printf("Weight %d: ", i + 1);
            scanf("%d", &weights[i]);
        }
    } else {
        printf("Invalid choice. Exiting the program.\n");
        return 1; // Exit the program with an error code
    }

    // Calculate the total weight
    for (i = 0; i < 5; i++) {
        totalWeight += weights[i];
    }

    // Print the total weight
    printf("The total weight of the treasures collected is: %d\n", totalWeight);

    return 0;
}

//13 Question
#include <stdio.h>

// Enumeration to identify the shape type
typedef enum {
    SQUARE,
    RECTANGLE
} ShapeType;

// Structure to define a Square
typedef struct {
    double area;
} Square;

// Structure to define a Rectangle
typedef struct {
    double length;
    double breadth;
} Rectangle;

// Union to hold either a Square or a Rectangle
typedef union {
    Square square;
    Rectangle rectangle;
} ShapeUnion;

// Structure to define a Shape that uses the union and enum
typedef struct {
    ShapeType type;
    ShapeUnion shape;
} Shape;

// Function to set a Square shape
void setSquare(Shape *shape, double area) {
    shape->type = SQUARE;
    shape->shape.square.area = area;
}

// Function to set a Rectangle shape
void setRectangle(Shape *shape, double length, double breadth) {
    shape->type = RECTANGLE;
    shape->shape.rectangle.length = length;
    shape->shape.rectangle.breadth = breadth;
}

// Function to display the shape details
void displayShape(const Shape *shape) {
    switch (shape->type) {
        case SQUARE:
            printf("Square:\n");
            printf("  Area: %.2f\n", shape->shape.square.area);
            break;
        case RECTANGLE:
            printf("Rectangle:\n");
            printf("  Length: %.2f\n", shape->shape.rectangle.length);
            printf("  Breadth: %.2f\n", shape->shape.rectangle.breadth);
            break;
        default:
            printf("Unknown shape type.\n");
    }
}

int main() {
    Shape shape1, shape2;
    
    // Set and display a Square
    setSquare(&shape1, 25.0);
    displayShape(&shape1);
    
    // Set and display a Rectangle
    setRectangle(&shape2, 10.0, 5.0);
    displayShape(&shape2);
    
    return 0;
}


//14 Question

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define INITIAL_SIZE 5 // Initial size of the array

// Function prototypes
void addStudent(char ***list, int *size, int *capacity, const char *name);
void printList(char **list, int size);

int main() {
    int size = 0;            // Current number of students in the list
    int capacity = INITIAL_SIZE; // Current capacity of the array
    char **students = malloc(capacity * sizeof(char*)); // Dynamic array for student names

    if (students == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    char name[100];
    int choice;

    while (1) {
        printf("Enter 1 to add a student name or 2 to print the list or 0 to exit: ");
        scanf("%d", &choice);
        getchar(); // Consume the newline character left by scanf

        if (choice == 1) {
            printf("Enter the student's name: ");
            fgets(name, sizeof(name), stdin);
            name[strcspn(name, "\n")] = '\0'; // Remove the newline character

            addStudent(&students, &size, &capacity, name);
        } else if (choice == 2) {
            printList(students, size);
        } else if (choice == 0) {
            break;
        } else {
            printf("Invalid choice. Please try again.\n");
        }
    }

    // Free allocated memory
    for (int i = 0; i < size; i++) {
        free(students[i]);
    }
    free(students);

    return 0;
}

void addStudent(char ***list, int *size, int *capacity, const char *name) {
    // Check if we need to resize the array
    if (*size >= *capacity) {
        *capacity *= 2; // Double the capacity
        char **newList = realloc(*list, *capacity * sizeof(char*));

        if (newList == NULL) {
            printf("Memory allocation failed.\n");
            exit(1);
        }

        *list = newList;
    }

    // Add the new student name to the list
    (*list)[*size] = malloc((strlen(name) + 1) * sizeof(char));
    if ((*list)[*size] == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }

    strcpy((*list)[*size], name);
    (*size)++;
}

void printList(char **list, int size) {
    if (size == 0) {
        printf("No students have submitted assignments yet.\n");
        return;
    }

    printf("List of students who have submitted their assignments:\n");
    for (int i = 0; i < size; i++) {
        printf("%d. %s\n", i + 1, list[i]);
    }
}


//15 Question
#include <stdio.h>

// Function to perform binary search on the ordered list
int binarySearch(int arr[], int size, int key) {
    int low = 0;
    int high = size - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        // Check if key is present at mid
        if (arr[mid] == key) {
            return mid; // Key found at index mid
        }
        // If key is greater, ignore the left half
        else if (arr[mid] < key) {
            low = mid + 1;
        }
        // If key is smaller, ignore the right half
        else {
            high = mid - 1;
        }
    }
    
    return -1; // Key not found
}

int main() {
    // Ordered list of book IDs
    int bookList[] = {101, 203, 305, 407, 509};
    int numBooks = sizeof(bookList) / sizeof(bookList[0]);
    
    int searchID;
    printf("Enter the book ID to search: ");
    scanf("%d", &searchID);
    
    // Perform binary search
    int result = binarySearch(bookList, numBooks, searchID);
    
    if (result != -1) {
        printf("Book with ID %d is available at index %d.\n", searchID, result);
    } else {
        printf("Book with ID %d is not available.\n", searchID);
    }
    
    return 0;
}

//16 Assignment
#include <stdio.h>

#define ROWS 3
#define COLS 3

void inputMatrix(int matrix[ROWS][COLS], const char *name);
void addMatrices(int matrixA[ROWS][COLS], int matrixB[ROWS][COLS], int result[ROWS][COLS]);
void printMatrix(int matrix[ROWS][COLS]);

int main() {
    int matrixA[ROWS][COLS], matrixB[ROWS][COLS], result[ROWS][COLS];

    // Input matrices
    printf("Enter elements for Matrix A:\n");
    inputMatrix(matrixA, "Matrix A");

    printf("Enter elements for Matrix B:\n");
    inputMatrix(matrixB, "Matrix B");

    // Add matrices
    addMatrices(matrixA, matrixB, result);

    // Print result
    printf("Matrix A:\n");
    printMatrix(matrixA);

    printf("Matrix B:\n");
    printMatrix(matrixB);

    printf("Result of A + B:\n");
    printMatrix(result);

    return 0;
}

// Function to input matrix elements
void inputMatrix(int matrix[ROWS][COLS], const char *name) {
    printf("Input elements for %s:\n", name);
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("Element [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Function to add two matrices
void addMatrices(int matrixA[ROWS][COLS], int matrixB[ROWS][COLS], int result[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrixA[i][j] + matrixB[i][j];
        }
    }
}

// Function to print matrix
void printMatrix(int matrix[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%4d ", matrix[i][j]);
        }
        printf("\n");
    }
}

//17(a) Question
#include <stdio.h>
#include <string.h>

#define NUM_STUDENTS 5

// Define the structure for student database
typedef struct {
    int registerNumber;
    char name[50];
    int age;
    float cgpa;
} Student;

// Function prototypes
void inputStudentRecords(Student students[], int numStudents);
Student findStudentWithGreatestCGPA(Student students[], int numStudents);

int main() {
    Student students[NUM_STUDENTS];

    // Input records for students
    printf("Enter details for %d students:\n", NUM_STUDENTS);
    inputStudentRecords(students, NUM_STUDENTS);

    // Find the student with the greatest CGPA
    Student topStudent = findStudentWithGreatestCGPA(students, NUM_STUDENTS);

    // Display the student with the greatest CGPA
    printf("\nStudent with the greatest CGPA:\n");
    printf("Register Number: %d\n", topStudent.registerNumber);
    printf("Name: %s\n", topStudent.name);
    printf("Age: %d\n", topStudent.age);
    printf("CGPA: %.2f\n", topStudent.cgpa);

    return 0;
}

// Function to input student records
void inputStudentRecords(Student students[], int numStudents) {
    for (int i = 0; i < numStudents; i++) {
        printf("\nEnter details for student %d:\n", i + 1);
        printf("Register Number: ");
        scanf("%d", &students[i].registerNumber);
        getchar(); // Consume newline left by scanf

        printf("Name: ");
        fgets(students[i].name, sizeof(students[i].name), stdin);
        // Remove newline character from name if present
        students[i].name[strcspn(students[i].name, "\n")] = '\0';

        printf("Age: ");
        scanf("%d", &students[i].age);

        printf("CGPA: ");
        scanf("%f", &students[i].cgpa);
    }
}

// Function to find the student with the greatest CGPA
Student findStudentWithGreatestCGPA(Student students[], int numStudents) {
    Student topStudent = students[0];
    for (int i = 1; i < numStudents; i++) {
        if (students[i].cgpa > topStudent.cgpa) {
            topStudent = students[i];
        }
    }
    return topStudent;
}

//18 Question
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

int main() {
    char number[100];  // Array to store the number as a string
    int len, count = 0;

    // Input the number as a string
    printf("Enter the number: ");
    scanf("%s", number);

    len = strlen(number);

    // Iterate through adjacent digits
    for (int i = 0; i < len - 1; i++) {
        // Form a two-digit number from adjacent digits
        int twoDigitNumber = (number[i] - '0') * 10 + (number[i + 1] - '0');
        
        // Check if the two-digit number is prime
        if (twoDigitNumber >= 10 && isPrime(twoDigitNumber)) {
            count++;
        }
    }

    // Print the count of prime two-digit numbers
    printf("Count of two-digit prime numbers: %d\n", count);

    return 0;
}

//18(b) Question

#include <stdio.h>

#define MAX_SIZE 100  // Maximum size of the array

// Function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to insert an element at a specific position
void insertElement(int arr[], int *size, int element, int position) {
    if (*size >= MAX_SIZE) {
        printf("Array is full! Cannot insert new element.\n");
        return;
    }
    if (position < 0 || position > *size) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = *size; i > position; --i) {
        arr[i] = arr[i - 1];
    }
    arr[position] = element;
    (*size)++;
}

// Function to delete an element from a specific position
void deleteElement(int arr[], int *size, int position) {
    if (*size == 0) {
        printf("Array is empty! Cannot delete element.\n");
        return;
    }
    if (position < 0 || position >= *size) {
        printf("Invalid position!\n");
        return;
    }
    for (int i = position; i < *size - 1; ++i) {
        arr[i] = arr[i + 1];
    }
    (*size)--;
}

// Function to search for an element in the array
int searchElement(int arr[], int size, int element) {
    for (int i = 0; i < size; ++i) {
        if (arr[i] == element) {
            return i;  // Return index of the element
        }
    }
    return -1;  // Element not found
}

int main() {
    int arr[MAX_SIZE] = {0};  // Initialize array with zero
    int size = 0;  // Current size of the array

    // Insert elements
    insertElement(arr, &size, 10, 0);  // Insert 10 at position 0
    insertElement(arr, &size, 20, 1);  // Insert 20 at position 1
    insertElement(arr, &size, 30, 2);  // Insert 30 at position 2
    printf("Array after insertions: ");
    printArray(arr, size);

    // Update an element
    if (size > 1) {
        arr[1] = 25;  // Update element at index 1
    }
    printf("Array after update: ");
    printArray(arr, size);

    // Search for an element
    int elementToSearch = 25;
    int index = searchElement(arr, size, elementToSearch);
    if (index != -1) {
        printf("Element %d found at index %d.\n", elementToSearch, index);
    } else {
        printf("Element %d not found.\n", elementToSearch);
    }

    // Delete an element
    deleteElement(arr, &size, 1);  // Delete element at position 1
    printf("Array after deletion: ");
    printArray(arr, size);

    return 0;
}
